### TASK MANAGEMENT API TESTS
### Single Project Approach - Role-based Task Management

### PHASE 1: AUTHENTICATION SETUP
# First, get tokens for different roles
# Replace with actual user IDs from your database

### Get Admin Token
POST http://localhost:3000/api/v1/auth/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin123"
}

### Get Manager Token
POST http://localhost:3000/api/v1/auth/login
Content-Type: application/json

{
  "email": "manager@example.com",
  "password": "manager123"
}

### Get Member Token
POST http://localhost:3000/api/v1/auth/login
Content-Type: application/json

{
  "email": "member@example.com",
  "password": "member123"
}

### PHASE 2: TASK CREATION TESTS

### 1. Manager Creates Project Task (Success)
POST http://localhost:3000/api/v1/tasks
Authorization: Bearer YOUR_MANAGER_TOKEN
Content-Type: application/json

{
  "title": "Design Homepage",
  "description": "Create modern homepage design with responsive layout",
  "priority": "HIGH",
  "dueDate": "2024-02-15T00:00:00.000Z",
  "assignedTo": "MEMBER_USER_ID",
  "isPersonal": false
}

### 2. Member Creates Personal Task (Success)
POST http://localhost:3000/api/v1/tasks
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "title": "Learn React",
  "description": "Study React fundamentals and hooks",
  "priority": "MEDIUM",
  "dueDate": "2024-02-25T00:00:00.000Z",
  "isPersonal": true
}

### 3. Member Tries to Create Project Task (Should Fail)
POST http://localhost:3000/api/v1/tasks
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "title": "Unauthorized Project Task",
  "description": "This should fail",
  "priority": "HIGH",
  "assignedTo": "ANOTHER_MEMBER_ID",
  "isPersonal": false
}

### 4. Manager Creates Project Task Without Assignment (Should Fail)
POST http://localhost:3000/api/v1/tasks
Authorization: Bearer YOUR_MANAGER_TOKEN
Content-Type: application/json

{
  "title": "Task Without Assignment",
  "description": "This should fail",
  "priority": "MEDIUM",
  "isPersonal": false
}

### PHASE 3: TASK VIEWING TESTS

### 5. Get My Tasks (Member View)
GET http://localhost:3000/api/v1/tasks?view=my-tasks
Authorization: Bearer YOUR_MEMBER_TOKEN

### 6. Get My Personal Tasks (Member View)
GET http://localhost:3000/api/v1/tasks?view=my-personal-tasks
Authorization: Bearer YOUR_MEMBER_TOKEN

### 7. Get Created Tasks (Manager View)
GET http://localhost:3000/api/v1/tasks?view=created-by-me
Authorization: Bearer YOUR_MANAGER_TOKEN

### 8. Get Project Tasks (Manager View)
GET http://localhost:3000/api/v1/tasks?view=team-tasks
Authorization: Bearer YOUR_MANAGER_TOKEN

### 9. Get Tasks with Pagination
GET http://localhost:3000/api/v1/tasks?view=my-tasks&page=1&limit=5
Authorization: Bearer YOUR_MEMBER_TOKEN

### 10. Get Tasks with Sorting
GET http://localhost:3000/api/v1/tasks?view=my-tasks&sortBy=priority&sortOrder=desc
Authorization: Bearer YOUR_MEMBER_TOKEN

### PHASE 4: TASK FILTERING TESTS

### 11. Filter by Status
GET http://localhost:3000/api/v1/tasks?view=my-tasks&status=IN_PROGRESS
Authorization: Bearer YOUR_MEMBER_TOKEN

### 12. Filter by Priority
GET http://localhost:3000/api/v1/tasks?view=my-tasks&priority=HIGH
Authorization: Bearer YOUR_MEMBER_TOKEN

### 13. Filter by Personal Tasks
GET http://localhost:3000/api/v1/tasks?view=my-tasks&isPersonal=true
Authorization: Bearer YOUR_MEMBER_TOKEN

### 14. Search Tasks by Title/Description
GET http://localhost:3000/api/v1/tasks?view=my-tasks&search=design
Authorization: Bearer YOUR_MEMBER_TOKEN

### 15. Combined Filters
GET http://localhost:3000/api/v1/tasks?view=my-tasks&status=TODO&priority=HIGH&search=homepage
Authorization: Bearer YOUR_MEMBER_TOKEN

### PHASE 5: TASK UPDATE TESTS

### 16. Member Updates Task Status (Success)
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "status": "IN_PROGRESS"
}

### 17. Member Tries to Update Task Title (Should Fail)
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "title": "Updated Title",
  "status": "IN_PROGRESS"
}

### 18. Manager Updates Task Assignment (Success)
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MANAGER_TOKEN
Content-Type: application/json

{
  "assignedTo": "NEW_MEMBER_ID",
  "priority": "HIGH",
  "dueDate": "2024-03-01T00:00:00.000Z"
}

### 19. Manager Updates Task Status to DONE (Success)
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MANAGER_TOKEN
Content-Type: application/json

{
  "status": "DONE"
}

### 20. Invalid Status Transition (Should Fail)
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "status": "DONE"
}

### PHASE 6: TASK DELETION TESTS

### 21. Manager Deletes Own Task (Success)
DELETE http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MANAGER_TOKEN

### 22. Member Tries to Delete Project Task (Should Fail)
DELETE http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN

### 23. Member Deletes Personal Task (Success)
DELETE http://localhost:3000/api/v1/tasks/PERSONAL_TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN

### PHASE 7: TASK ACCESS PERMISSION TESTS

### 24. Get Specific Task (Member - Assigned Task)
GET http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN

### 25. Get Specific Task (Member - Unassigned Task - Should Fail)
GET http://localhost:3000/api/v1/tasks/UNASSIGNED_TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN

### 26. Get Specific Task (Manager - Own Created Task)
GET http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MANAGER_TOKEN

### PHASE 8: COMPREHENSIVE TASK WORKFLOW TEST

### 27. Complete Task Workflow
# Step 1: Create Task
POST http://localhost:3000/api/v1/tasks
Authorization: Bearer YOUR_MANAGER_TOKEN
Content-Type: application/json

{
  "title": "Complete Workflow Test",
  "description": "Testing complete task workflow",
  "priority": "HIGH",
  "dueDate": "2024-02-20T00:00:00.000Z",
  "assignedTo": "MEMBER_USER_ID",
  "isPersonal": false
}

# Step 2: Member Starts Task
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "status": "IN_PROGRESS"
}

# Step 3: Member Submits for Review
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "status": "REVIEW"
}

# Step 4: Manager Approves Task
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MANAGER_TOKEN
Content-Type: application/json

{
  "status": "DONE"
}

### PHASE 9: ERROR HANDLING TESTS

### 28. Invalid Task ID
GET http://localhost:3000/api/v1/tasks/invalid-task-id
Authorization: Bearer YOUR_MEMBER_TOKEN

### 29. Invalid Status Transition
PATCH http://localhost:3000/api/v1/tasks/TASK_ID
Authorization: Bearer YOUR_MEMBER_TOKEN
Content-Type: application/json

{
  "status": "INVALID_STATUS"
}

### 30. Invalid Priority
POST http://localhost:3000/api/v1/tasks
Authorization: Bearer YOUR_MANAGER_TOKEN
Content-Type: application/json

{
  "title": "Invalid Priority Test",
  "priority": "INVALID_PRIORITY",
  "assignedTo": "MEMBER_USER_ID",
  "isPersonal": false
}

### PHASE 10: PAGINATION AND SORTING TESTS

### 31. Pagination Test
GET http://localhost:3000/api/v1/tasks?view=my-tasks&page=1&limit=3
Authorization: Bearer YOUR_MEMBER_TOKEN

### 32. Sorting by Due Date
GET http://localhost:3000/api/v1/tasks?view=my-tasks&sortBy=dueDate&sortOrder=asc
Authorization: Bearer YOUR_MEMBER_TOKEN

### 33. Sorting by Priority
GET http://localhost:3000/api/v1/tasks?view=my-tasks&sortBy=priority&sortOrder=desc
Authorization: Bearer YOUR_MEMBER_TOKEN

### 34. Sorting by Title
GET http://localhost:3000/api/v1/tasks?view=my-tasks&sortBy=title&sortOrder=asc
Authorization: Bearer YOUR_MEMBER_TOKEN

### NOTES:
# Replace placeholders:
# - YOUR_MANAGER_TOKEN: JWT token from manager login
# - YOUR_MEMBER_TOKEN: JWT token from member login
# - TASK_ID: Actual task ID from task creation response
# - MEMBER_USER_ID: Actual member user ID
# - NEW_MEMBER_ID: New member user ID for reassignment
# - PERSONAL_TASK_ID: Personal task ID
# - UNASSIGNED_TASK_ID: Task not assigned to the member

# Expected Responses:
# - Success: 200/201 with task data
# - Permission Error: 403 Forbidden
# - Validation Error: 400 Bad Request
# - Not Found: 404 Not Found
# - Pagination: 200 with { tasks: [], pagination: {} } 